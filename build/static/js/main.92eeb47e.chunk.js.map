{"version":3,"sources":["Comments/Comments.js","SingleBlog/SingleBlog.js","Header/Header.js","Blog/Blog.js","Blogs/Blogs.js","Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Comments","props","blogId","useState","comments","setComments","useEffect","fetch","then","res","json","data","catch","error","console","log","className","map","comment","key","id","src","alt","name","body","SingleBlog","useParams","blog","setBlog","title","Container","useStyles","makeStyles","theme","root","flexGrow","Header","classes","AppBar","position","Toolbar","to","Typography","variant","Blog","Button","color","Blogs","blogs","setBlogs","maxWidth","item","Main","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.92eeb47e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./comments.css\";\r\n\r\nconst Comments = (props) => {\r\n  const { blogId } = props;\r\n  const [comments, setComments] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/comments?postId=\" + blogId)\r\n      .then((res) => res.json())\r\n      .then((data) => setComments(data))\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"comment\">\r\n      <h4>Comments</h4>\r\n      <hr></hr>\r\n\r\n      {comments.map((comment) => (\r\n        <div className=\"comments\" key={comment.id}>\r\n          <div>\r\n            <img\r\n              className=\"avater\"\r\n              src=\"https://image.flaticon.com/icons/svg/892/892781.svg\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"comment-body\">\r\n            <h5>{comment.name}</h5>\r\n            <p>{comment.body}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport Comments from \"../Comments/Comments\";\r\n\r\nconst SingleBlog = () => {\r\n  const { blogId } = useParams();\r\n  const [blog, setBlog] = useState([]);\r\n\r\n  const { id, title, body } = blog;\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts/\" + blogId)\r\n      .then((res) => res.json())\r\n      .then((data) => setBlog(data))\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  return (\r\n    <Container>\r\n      <div className=\"blog\">\r\n        <h2>{title}</h2>\r\n        <p>{body}</p>\r\n      </div>\r\n\r\n      <Comments blogId={blogId}></Comments>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SingleBlog;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./header.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Link to=\"/\">\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              My New Blog\r\n            </Typography>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport \"./blog.css\";\r\n\r\nconst Blog = (props) => {\r\n  const { id, title, body } = props.blog;\r\n  return (\r\n    <>\r\n      <div className=\"blog\">\r\n        <h2>{title}</h2>\r\n        <p>{body}</p>\r\n        <Link to={\"/blog/\" + id}>\r\n          <Button variant=\"outlined\" color=\"primary\" className=\"see-more\">\r\n            Read\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <hr></hr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./blogs.css\";\r\nimport Blog from \"../Blog/Blog\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nconst Blogs = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((res) => res.json())\r\n      .then((data) => setBlogs(data))\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <br />\r\n      <h1 className=\"text-center\">Our Recent Posts</h1>\r\n\r\n      <Container maxWidth=\"lg\">\r\n        <div className=\"flex\">\r\n          {blogs.map((item) => (\r\n            <Blog blog={item} key={item.id}></Blog>\r\n          ))}\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blogs;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport SingleBlog from \"../SingleBlog/SingleBlog\";\r\nimport Header from \"../Header/Header\";\r\nimport Blogs from \"../Blogs/Blogs\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <>\r\n      {/* Router Section */}\r\n      <Router>\r\n        <Header></Header>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Blogs></Blogs>\r\n          </Route>\r\n          <Route path=\"/blog/:blogId\">\r\n            <SingleBlog></SingleBlog>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Main from \"./Main/Main\";\n\nfunction App() {\n  return (\n    <>\n      <Main></Main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}